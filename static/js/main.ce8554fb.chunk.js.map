{"version":3,"sources":["components/InfoBox.js","components/Table.js","components/LineGraph.js","App.js","utils.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","Card","CardContent","Typography","className","color","Table","countries","map","country","src","countryInfo","flag","alt","option","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersects","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","caseType","useState","setData","CD","setCD","buildChartData","lastDataPoint","chartData","date","console","log","newDataPoint","x","y","push","buildCountryChart","useEffect","a","url","fetch","then","res","json","timeline","length","labelColor","datasets","backgroundColor","borderColor","borderWidth","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lat","lng","setMapCenter","setMapZoom","name","iso2","sortedData","sort","b","sortData","changeOption","e","countryCode","target","parseInt","long","FormControl","Select","onChange","MenuItem","todayCases","todayRecovered","recovered","todayDeaths","deaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce8554fb.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Card, CardContent, Typography} from '@material-ui/core';\r\n\r\nfunction InfoBox({title, cases, total}) {\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography className=\"infobox-title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n\r\n        <h2 className=\"infobox-cases\">{cases}</h2>\r\n\r\n        <Typography className=\"infobox-total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from 'react';\r\nimport './table.css';\r\n\r\nfunction Table({countries}) {\r\n  return (\r\n    <div className=\"table\">\r\n\r\n      {countries.map (country => (\r\n        <tr>\r\n          <td><img src={country.countryInfo.flag} alt=\"flag\" /></td>\r\n          <td>{country.country}</td>\r\n          <td>{country.cases}</td>\r\n\r\n        </tr>\r\n      ))}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, {useState, useEffect} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport {numeral} from 'numeral';\r\n\r\nconst option = {\r\n  legend: {\r\n    display: true,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: 'index',\r\n    intersects: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral (tooltipItem.value).format ('+0,0');\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: 'time',\r\n        time: {\r\n          format: 'MM/DD/YY',\r\n          tooltipFormat: 'll',\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral (value).format ('0a');\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nfunction LineGraph({caseType = 'cases', country}) {\r\n  const [data, setData] = useState ({});\r\n  const [CD, setCD] = useState ({});\r\n\r\n  // console.log (data);\r\n  // console.log (country);\r\n\r\n  const buildChartData = (data, caseType = 'cases') => {\r\n    const chartData = [];\r\n\r\n    console.log (chartData);\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n      if (lastDataPoint) {\r\n        const newDataPoint = {\r\n          x: date,\r\n          y: data[caseType][date] - lastDataPoint,\r\n        };\r\n        chartData.push (newDataPoint);\r\n      }\r\n      lastDataPoint = data[caseType][date];\r\n    }\r\n    return chartData;\r\n  };\r\n\r\n  const buildCountryChart = (data, caseType = 'cases') => {\r\n    console.log (data);\r\n    const chartData = [];\r\n\r\n    let lastDataPoint;\r\n    for (let date in data) {\r\n      if (lastDataPoint) {\r\n        const newDataPoint = {\r\n          x: date,\r\n          y: data[date] - lastDataPoint,\r\n        };\r\n        chartData.push (newDataPoint);\r\n      }\r\n      lastDataPoint = data[date];\r\n    }\r\n    return chartData;\r\n  };\r\n\r\n  useEffect (\r\n    async () => {\r\n      console.log (country);\r\n      const url = country === 'worldwide'\r\n        ? 'https://disease.sh/v3/covid-19/historical/all?lastdays=30'\r\n        : `https://disease.sh/v3/covid-19/historical/${country}?lastdays=30`;\r\n\r\n      await fetch (url).then (res => res.json ()).then (data => {\r\n        if (country !== 'worldwidw') {\r\n          setCD (data.timeline);\r\n          const chartData = buildCountryChart (CD);\r\n        }\r\n        const chartData = buildChartData (data, caseType);\r\n        setData (chartData);\r\n\r\n        // const chartData = buildChartData (data, caseType);\r\n        // setData (chartData);\r\n      });\r\n    },\r\n    [caseType]\r\n  );\r\n\r\n  return (\r\n    <div className=\"mt-5 bg-dark text-light \">\r\n      {data.length > 0 &&\r\n        <Line\r\n          option={option}\r\n          data={{\r\n            labelColor: ['red'],\r\n            datasets: [\r\n              {\r\n                label: 'WorldWide Cases Chart',\r\n                data: data,\r\n                backgroundColor: 'rgba(204,16,52,0.5)',\r\n                borderColor: '#fff',\r\n\r\n                borderWidth: 0.5,\r\n              },\r\n            ],\r\n          }}\r\n        />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {\n  FormControl,\n  Select,\n  MenuItem,\n  Card,\n  CardContent,\n} from '@material-ui/core';\nimport InfoBox from './components/InfoBox';\nimport Map from './components/CovidMap';\nimport Table from './components/Table';\nimport {sortData} from './utils';\nimport LineGraph from './components/LineGraph';\nimport 'leaflet/dist/leaflet.css';\n\nfunction App () {\n  const [countryCode, setcountryCode] = useState('');\n  const [countries, setCountries] = useState ([]);\n  const [country, setCountry] = useState ('worldwide');\n  const [countryInfo, setCountryInfo] = useState ({});\n  const [tableData, setTableData] = useState ([]);\n  const [mapCenter, setMapCenter] = useState ({\n    lat: 10,\n    lng: 27.01,\n  });\n  const [mapZoom, setMapZoom] = useState (3);\n  useEffect (() => {\n    fetch ('https://disease.sh/v3/covid-19/all')\n      .then (res => res.json ())\n      .then (data => {\n        setCountryInfo (data);\n      });\n  }, []);\n\n  useEffect (() => {\n    const fetchCountries = () => {\n      fetch ('https://disease.sh/v3/covid-19/countries')\n        .then (res => res.json ())\n        .then (data => {\n          const countries = data.map (country => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n\n          const sortedData = sortData (data);\n\n          setTableData (sortedData);\n\n          setCountries (countries);\n        });\n    };\n    fetchCountries ();\n  }, []);\n\n  const changeOption = async e => {\n    const countryCode = e.target.value;\n\n    const url = countryCode === 'worldwide'\n      ? 'https://disease.sh/v3/covid-19/all'\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n      \n\n    await fetch (url).then (res => res.json ()).then (data => {\n      setCountry (countryCode);\n      setCountryInfo (data);\n      setMapCenter ([\n        parseInt (data.countryInfo.lat),\n        parseInt (data.countryInfo.long),\n      ]);\n      setMapZoom (4);\n    });\n  };\n\n  return (\n    <div className=\"app\">\n\n      <div className=\"app-left\">\n\n        <div className=\"app-header\">\n          <h1>COVID-19 Tracker</h1>\n\n          <FormControl className=\"app-dropdown col-sm-3\">\n            <Select\n              className=\"form-select\"\n              value={country}\n              onChange={changeOption}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map (country => (\n                <MenuItem value={country.value}>\n                  {country.name}<br />\n                </MenuItem>\n              ))}\n\n            </Select>\n          </FormControl>\n\n        </div>\n\n        <div className=\"app-states\">\n          <InfoBox\n            title=\"Coronavirus Cases\"\n            cases={countryInfo.todayCases}\n            total={countryInfo.cases}\n          />\n          <InfoBox\n            title=\"Recovered\"\n            cases={countryInfo.todayRecovered}\n            total={countryInfo.recovered}\n          />\n          <InfoBox\n            title=\"Deaths\"\n            cases={countryInfo.todayDeaths}\n            total={countryInfo.deaths}\n          />\n\n        </div>\n\n        {/* <Map center={mapCenter} zoom={mapZoom} /> */}\n        <LineGraph  country={country}/>\n\n      </div>\n\n      <Card className=\"app-right\">\n        <CardContent>\n          <h3>Live Cases By Country</h3>\n          <Table countries={tableData} />\n          {/* <h3>World Wide New Cases</h3>\n          <LineGraph /> */}\n        </CardContent>\n\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","export function sortData(data){\r\n  const sortedData = [...data];\r\n\r\n  return sortedData.sort ((a, b) => a.cases > b.cases);\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}